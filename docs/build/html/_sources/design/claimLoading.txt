###############################
Design Note: Loading New Claims
###############################

:ref:`architecture`

Problem
=======

How to identify the Claim Classification attributes when loading X12N Claim Messages?

Generally, the X12N claims come from some external system through an extract process.
The attributes of those claims are created manually.  The extracted claims and the
attributes must be matched up for loading.

Legacy Process Overview
=======================

The legacy claim loading process works as follows.

1.  For eacb Claim Selection:

    a.  Create a parameter file for a GW Extract BAT file,
        ``D:\Tiger\scripts\Getx12.bat``.

    b.  Run the GW Extract.  Attempt to read the output file to see
        if a claim was found.

    c.  Also, resolve various FK's for dimensions of the classification.  Save
        the file name, Automod constraints, and Classification info for pass 2.

2.  For each Claim Extract File:

    a.  Read the extracted file.  Get the automod constraints and the claim
        classification.

    b.  Load the Database with the claim, automod constraints and classification.

Legacy Solution FAQ's
=====================

:Q: When messages are extracted from the HIPAA gateway, what form are they in?
    One message per file?  Multiple messages per file?

:A: The business users query Sybase for claim ids (GWIDs) they want loaded.
    They manually create a comma delimited text file with these GWIDs and
    information about the GWIDs.  The file is one GWID per line (see
    attached).  That file is read by the load app (ECL00018).  At a high
    level, for each line, the claim is pulled from the Gateway database (in an
    X12 format), unwrapped (one segment per line), and written to a text file.
    Once all claims have been retrieved for the current user provided load
    file, the X12 text file created by the load app is read and each X12
    transaction is loaded into the Tiger database.  This process occurs for
    each load file the users provide. The load app will cycle through all
    files found in the load directory.

    Additionally, each load file provided by the users is validated.  We make
    sure they are providing allowed values for the descriptive information
    about the claim.

    We also keep track of which claims were found in the Gateway database
    (probably caused by an invalid GWID), and any duplicate load information,
    and provide a count report, and a detailed list of transactions that did
    not pass validation, when the load process is done (see attached).

:Q: Is it a mixed bag of 837I and 837P or do they tend to get a file (or group
    of files) of all 837I's or all 837P's?

:A: Users are instructed to separate GWIDs based on transaction type into
    separate files.

    During claim modification using Tiger, users are not allowed to select
    multiple transaction types.  If they already selected some 837I claims,
    they can not select 837P claims.

:Q: Does anyone "preprocess" the files before they're parsed and loaded?

:A: No.  All load processing, including parsing and data validation, is done
    within the load app.

Claim Selection File
====================

CSV file with the following columns.  In the legacy application, the CSV data has
no headers, and must be in the following order.  Future releases will accept
column titles.

``GWID``
    This is the HIPAA Gateway Transaction ID for the claim, used to retrieve it
    from FACETS.

``BENEFIT``
    The Benefit ID to assign to this claim.  This is checked against the
    TOS/Benefit list.

``TYPE-OF-SERVICE``
    The Type of Service ID to assign to this claim.  This is checked against the
    TOS/Benefit list.

``LOCATION``
    The codes are ALB, BUF, CE and CW.
    Descriptions are Albany, Buffalo, Central NY West, and Central NY East.

``TYPE``
    The codes are I, P, O or D.
    Descriptions are In-Patient, Professional, Out-Patient and Dental.

``SECONDARY``
    The codes are M and R.
    Descriptions are Medicare and Regular.

``GENDER``
    This is used to define a constraint for automod.
    Codes are M, F and U.

``AGE-FROM``
    This is used to define a constraint for automod.

``AGE-TO``
    This is used to define a constraint for automod.

Claim Identification
====================

There are two internal candidate keys on a claim, as well as a the "external" GWID
that can be used when extracting claims from an EDI gateway.

ISA09 + ISA10 + ISA13
    Interchange Control Number may be a unique identifier for the claim as a whole,
    when qualified by Interchange Date and Interchange Time.

BHT03
    Reference Identification.

Claim Loading Design
====================

Fundamentally, a set of claims are loaded by a web service.  This service accepts
a three-part document:

    - the claim characterstics (Benefit, Type-of-Service, Location, etc.),

    - the automod constraints (gender, age range),

    - a set of X12N text claim messages.

The claim documents is created by an Extract.  The extract has the following summary.

:Input:
    A `Claim Selection File`_.

:Output:
    A `Claim Description File` that includes the claim selection parameters
    plus the actual X12N message text in an additional column.

:Processing:
    Read the claim selection record, get the claim from the claim processing
    application, write the claim description record.

The loading is performed by a batch "wrapper" program.  This program has the
following summary.

:Input:
    A `Claim Description File` that has the claim selection parameters.
    It has either the claim file name in an additional column (``CLAIM-FILE``)
    or it has the actual X12N message text in an additional column of the CSV file.
    (``CLAIM-TEXT``)

:Output:
    A log of processing.  Database updates that include the claim characteristics,
    the automod constraints and the claim itself.

:Processing:
    Read the claim description row, call the claim load web service.  Log the
    results.

The load web service has the following summary.

:Input:
    A `Claim Load Document` includes the claim characteristics,
    the automod constraints and the claim itself.

:Output:
    Database updates.  Log message or fault.

:Processing:
    Accept the Claim Document and the Automod constraints and the characteristics.
    Upsert the characteristics, upsert the automod constraints, load the claim if
    it is unique.  If the claim is a duplicate, reject the load and signal a fault.

The Extract-Load processing is a pipeline from Extract to Batch Load.  The claim
claim description file written by the extractor is then read by the loader and used
to invoke the Claim Load web service.
