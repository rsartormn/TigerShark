#############################
Design Note: Claim Data Model
#############################

:ref:`architecture`

Problem
=======

There are several representations for claims, all of which need to be
either reconciled into a single model or mappings created among the representations.

-   As a ``Claim`` object structure.  Very hard to read and write -- requires
    complex marshalling adn unmarshalling methods.  Very easy to manipulate.

-   As an ``X12Message`` structure.  Easy to read and write, since it's standardized flat
    text.  Hard to navigate and manipulate.

-   As RDBMS tables and columns.  Easy to summarize multiple messages using
    SQL techniques.  Easy to persist.  Very hard to read and write, moderately
    hard to manipulate.

Note that the 837 claims form a natural-looking class hierarchy with common features
and subclass-unique features.  A proper class hierarchy simplifies the application
programming by making use of class inheritance techniques.

Forces
======

X12 structures must be used as the source and destination for claims.  It's
standardized, and readily available.

RDBMS structures must be used for persistence.  It's standardized and readily
available.  Further, simple ORM layers can bridge between a useeful object
model and a RDBMS persistence model.

There are three use cases for this structure:

-   Defining the structure in the first place.  X12 messages have 57 different
    types of segments.  Some segment types are heavily reused -- sometimes in separate
    loops, sometimes within a single loop -- leading to 100's of variations.

-   Persistence of the entire claim or X12 message.

-   Navigation and basic get/set of elements within a segment within an instance
    of a loop.

-   Adding and removing X12 segments and loops to fundamentally alter the
    claim structure.  Adding or removing a Loop generally means that a number of
    closely-related segments are added or removed.

We have two external, persistent representations of claims: X12 and RDBMS. We
must map between both external representations using a common internal model --
either at the ``X12Message`` level or at the ``Claim`` level.

-   **X12Message**.  In this case, each individual "attribute" is an
    X12 element, accessible via an XPath-like query that navigates through the X12 structure
    to the requested attribute.

    -   Definition.  This comes from the ``.SEF`` files and the implementation guide.
        the ``tools.convertPyX12``, ``tools.convertSEF`` applications can generate
        the entire DB schema from metadata.  The claim definitions must be folded in
        manually.

    -   Persistence.  This is problem-domain independent, and highly reusable.

    -   Navigation.

        -   Since it maps via Django's ORM, the admin pages are generated automatically by this
            implementation.

        -   This pushes the X12/XPath navigation into the application,
            leading to a degree of obscurity. For example, the ``'DTP*472'``
            attribute ``DTP03`` is updated by automod.

    -   Structure Changes. Simply adding a Segment in the Django admin pages can
        lead to creating an incomplete Loop. Either some validation is required
        to prevent this, or some application logic is required to define the
        complete Loop and step the user through each segment required.

-   **Claim**.  In this case, each individual attribute is an actual
    object attribute.

    -   Definition.  This comes from the legacy VB class files which are based on the implementation guide.
        the ``tools.convertVB`` can generate the entire DB schema from metadata.
        The X12 mappings, however, for marshalling and unmarshalling X12 messages must
        be folded in manually.

    -   Persistence.  Claim level persistence adds a layer of processing between
        the X12 unmarshalling and the proper claim structure.

        -   The application operates at a level closer to the user's understanding.

        -   We have a more complex (and less transparent) two-step marshalling and unmarshalling
            of X12 text to X12 structures to Claims.

    -   Navigation.  It allows the application to be defined in functional user terms, leading
        to clear terms.  For example, the ``ProServiceLine.SrvDT`` attribute is updated
        by Automod.

    -   Structure Changes.  If we persist at the Claim level, then the default Django admin
        pages would present the user's view of a claim.

-   **Both**.  In this case, we use X12Message structures for persistence, but present
    Claim structures to users.  This implies two tiers of GUI (X12-level and Claim-level).
    This also implies a manual mappping between the user-oriented Claim view
    and the X12 message view.

    -   Definition.  The X12 message structure comes from .SEF files.

        -   We can keep a set of Automod mappings that translate Claim attributes
            into XPath-like message locations. In this case, we might have a table
            or dictionary that provides a mapping from user-oriented
            "object[occurance].attribute"-like notation to a properly qualified
            "loop-path.segment.element" notation.  Since this doesn't create a complete
            object model for Claims, it makes GUI definition challenging.

        -   We can build a Claim object from the X12Message object. This forces us
            to assure that we either use the Claim exclusively or create a two-way
            mapping between Claim data and X12 data.

        -   Define the Claim object as a **Facade** that uses the X12-XPath
            mappings. In this case, we don't duplicate the X12 data to make a claim,
            instead we package the various Claim to X12 mappings as get/set methods
            of a claim that provide access to the underlying X12 objects. In this
            case, the Claim is just a "view" of the X12 data.

    -   Persistence.  This is done via the X12 solution, see above.

    -   Navigation.  There are two levels: X12 and Claim.  This leads to building two tiers
        of GUI.  The lower level is a transparent view of the X12 message.  The higher
        level is a friendly, business-focused view of a Claim.

    -   Structure Changes.  At the X12 level, this is requires knowing the Loop structure
        so that appropriate segments can be added.  At the Claim level, some validation
        rules need to be in place to assure that attribute values are provided in a way
        that forces creation of appropriate X12 segments to create a valid loop structure.

Solution
========

A Claim class hierarchy is essential for having user-friendly, functional
presentation in the application.

Defining a Claim object that is a **Facade** over an X12 message provides the
claim-like structure without duplicating data.  Duplication is a problem because
it forces us to do an additional two-way mapping between X12 and the Claim objects.
(Note that ORM is already a two-way mapping between RDBMS and X12 structures.)

If Claim is a view, defined over the X12 message structure, we can define the higher-level,
claim-oriented GUI separately from the low-level X12 GUI that is built automatically
by Django.  The higher-level GUI could be more easily customized to include
Customer-specific Implmentation Guide nuances.

+-----------------+-----------------+-------------------+
|Model            |Presentation     |Access             |
+=================+=================+===================+
|Claim Structure  |Claim GUI        |**Facade** over X12|
| - Claim         |                 |                   |
| - Claim Details |                 |                   |
| - Patient       |                 |                   |
| - Provider      |                 |                   |
| - Submitter     |                 |                   |
| - Subscriber    |                 |                   |
| - Sevice Line   |                 |                   |
+-----------------+-----------------+-------------------+
|X12 Structure    |Django Admin  UI |ORM over SQL Tables|
| - Loops         |                 |                   |
| - Segment Types |                 |                   |
| - Elements      |                 |                   |
+-----------------+-----------------+-------------------+
|SQL Structure    |No GUI           |DB Access in ORM   |
| - Table per     |                 |                   |
|   Segment Type  |                 |                   |
+-----------------+-----------------+-------------------+

This leads to building two tiers of claim UI: the lower-level X12 Structure UI
is the default Django admin pages.  The higher-level Claim UI would
have to be built "by hand" to present the user with a meaningful Claim structure.

The Claim object model, being a **Facade** over the X12 structure would tend
to build properly persistent X12 objects in the normal course of events.

Consequences
============

We need a simple-looking Claim class hierarchy that handles the relevant
data items, and provides the proper level of reuse.  A simple class hierarchy
can provide proper polymorphism, simplifying the automod algorithm.

Each "attribute" of a claim can become a Python property.  The Python property
definition binds a getter/setter pair; these both use XPath navigation to locate the element
within the segment within the proper loop structure.

Note that we need to track instances correctly so that we can navigate to
the correct loop instance when a loop occurs multiple times.
